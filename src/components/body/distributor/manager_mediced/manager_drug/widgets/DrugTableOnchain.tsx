"use client";

import React, { useMemo, useState } from "react";
import {
  Box,
  Stack,
  Typography,
  Paper,
  IconButton,
  Tooltip,
  Button,
} from "@mui/material";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { useDrugServices } from "@/hooks/database/useDrug";
import { contractService } from "@/services/contract/drugContract";
import { ethers } from "ethers";
import toast from "react-hot-toast";
import { useAppKitAccount } from "@reown/appkit/react";
import { BackendProduct, ProductType } from "@/types/drug";
import DrugDetailModal from "./DrugDetailModal";
import { backendService } from "@/services/drugService";

export default function DrugTableOnchain() {
  const { merged, loading, setBackendProducts } = useDrugServices();

  const { address, isConnected } = useAppKitAccount();

  // üîπ State cho modal chi ti·∫øt
  const [selectedProduct, setSelectedProduct] =
    useState<BackendProduct | null>(null);
  const [openModal, setOpenModal] = useState(false);

  // =============================
  // üß© L·ªçc thu·ªëc ch·ªù onchain
  // =============================
  const waitingOnchain = useMemo(() => {
  if (!merged) return [];
  return merged.filter(
    (p) => p.isActive === "active" && p.onChain === false
  );
}, [merged]);


  // =============================
  // üß© Upload function
  // =============================
 const handleUploadToChain = async (row: BackendProduct & { origin?: string; productType?: ProductType }) => {
  if (!isConnected || !window.ethereum) {
    toast.error("‚ö†Ô∏è Vui l√≤ng k·∫øt n·ªëi v√≠ tr∆∞·ªõc khi ƒë·∫©y l√™n blockchain!");
    return;
  }

  const toastId = toast.loading("‚è≥ ƒêang g·ª≠i giao d·ªãch l√™n blockchain...");

  try {
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const network = await provider.getNetwork();

    if (Number(network.chainId) !== 5080) {
      toast.dismiss(toastId);
      toast.error("‚ö†Ô∏è Sai m·∫°ng! H√£y chuy·ªÉn sang PZO Network (ChainID 5080)");
      return;
    }

    // üß© 1. G·ªçi smart contract ƒë·ªÉ on-chain
    const tx = await contractService.createProduct(signer, {
      name: row.name,
      uom: row.uom || "vi√™n",
      uomQuantity: row.uomQuantity || 1,
      companyCode: row.companyCode ?? "",
      productType: row.productType || "domestic",
      gtin: row.gtin ?? "",
      origin: row.origin || "",
      description: row.description || "",
      txHash: row.txHash || "",
    });

    toast.dismiss(toastId);
    toast.success(`‚úÖ Thu·ªëc "${row.name}" ƒë√£ ƒë∆∞·ª£c ƒë∆∞a l√™n blockchain!`);

   // üß© C·∫≠p nh·∫≠t ngay frontend ‚Äî kh√¥ng c·∫ßn reload
setBackendProducts((prev) =>
  (prev ?? []).map((item) =>
    item._id === row._id ? { ...item, onChain: true } : item
  )
);


    console.log("üì¶ Tx:", tx);
    console.log("üìú Hash:", tx?.hash || tx?.transactionHash);

    // üß© 2. G·ªçi API backend c·∫≠p nh·∫≠t
    await backendService.updateProduct({
      productId: row._id,
      name: row.name,
      gtin: row.gtin,
      type: row.productType || "domestic",
      onChain: true,
    });

    toast.success("‚úÖ Backend ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i onChain!");
  } catch (err) {
    console.error("‚ùå L·ªói:", err);
    toast.dismiss(toastId);
    toast.error(`‚ùå Giao d·ªãch th·∫•t b·∫°i: ${String(err)}`);
  }
};



  // =============================
  // üß© Columns setup
  // =============================
  const columns: GridColDef[] = [
    { field: "name", headerName: "T√™n thu·ªëc", flex: 1 },
    { field: "companyCode", headerName: "M√£ c√¥ng ty", width: 150 },
    { field: "gtin", headerName: "GTIN", width: 150 },
    {
      field: "actions",
      headerName: "H√†nh ƒë·ªông",
      width: 180,
      renderCell: (params) => {
        const row = params.row;
        const disabled = !isConnected;

        return (
          <Stack direction="row" spacing={1}>
            {/* üëÅÔ∏è N√∫t xem chi ti·∫øt */}
            <Tooltip title="Xem chi ti·∫øt thu·ªëc">
              <IconButton
                size="small"
                onClick={() => {
                  setSelectedProduct(row);
                  setOpenModal(true);
                }}
              >
                <VisibilityIcon color="info" />
              </IconButton>
            </Tooltip>

            {/* ‚òÅÔ∏è Upload l√™n blockchain */}
            <Tooltip
              title={
                disabled
                  ? "‚ö†Ô∏è Vui l√≤ng k·∫øt n·ªëi v√≠ tr∆∞·ªõc!"
                  : "ƒê∆∞a thu·ªëc n√†y l√™n blockchain"
              }
            >
              <span>
                <IconButton
                  size="small"
                  onClick={() => handleUploadToChain(row)}
                  disabled={disabled}
                  color={disabled ? "default" : "primary"}
                >
                  <CloudUploadIcon />
                </IconButton>
              </span>
            </Tooltip>
          </Stack>
        );
      },
    },
  ];

  // =============================
  // üß© Render
  // =============================
  return (
    <Box>
      <Stack
        direction="row"
        justifyContent="space-between"
        alignItems="center"
        mb={2}
      >
        <Typography variant="h6">Thu·ªëc ch·ªù onchain</Typography>
        <Button variant="outlined" color={isConnected ? "success" : "primary"}>
          {isConnected
            ? `ƒê√£ k·∫øt n·ªëi: ${address?.slice(0, 6)}...${address?.slice(-4)}`
            : "Ch∆∞a k·∫øt n·ªëi v√≠"}
        </Button>
      </Stack>

      <Paper sx={{ p: 2 }}>
        <div style={{ height: 450, width: "100%" }}>
          <DataGrid
            rows={waitingOnchain}
            columns={columns}
            loading={loading}
            pageSizeOptions={[10, 25]}
            getRowId={(row) =>
              row._id ?? row.productId ?? row.gtin ?? Math.random().toString()
            }
          />
        </div>
      </Paper>

      {/* Modal chi ti·∫øt thu·ªëc */}
      <DrugDetailModal
        open={openModal}
        onClose={() => setOpenModal(false)}
        product={selectedProduct}
      />
    </Box>
  );
}
